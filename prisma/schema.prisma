// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  adminId   String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  secretKey String
  otp       String?
}

model organizer {
  organizerId      String  @id @default(uuid())
  profile          String?
  name             String
  organizationName String
  email            String  @unique
  phoneNo          String
  password         String
  otp              String?
  website          String?
  socialMediaLinks String
  event            event[]
  role             role    @default(organizer)
  isVerified       Boolean @default(false)
}

model event {
  eventId       String           @id @default(uuid())
  startTime     DateTime
  endTime       DateTime
  venue         String
  banner        String?
  eventType     eventType
  anniversary   anniversary?
  wedding       wedding?
  corporate     corporate?
  birthday      birthday?
  housewarming  housewarming?
  isVerified    Boolean          @default(false)
  ticketsInfo   TicketsInfo?
  booking       attendeeEvents[]
  organizer     organizer?       @relation(fields: [organizerId], references: [organizerId])
  organizerId   String?
  anniversaryId String?
}

model anniversary {
  id          String  @id @default(uuid())
  coupleNames String
  years       String
  venue       String
  specialNote String?
  event       event   @relation(fields: [eventId], references: [eventId])
  eventId     String  @unique
}

model wedding {
  id          String  @id @default(uuid())
  coupleNames String
  theme       String?
  event       event   @relation(fields: [eventId], references: [eventId])
  eventId     String  @unique
}

model corporate {
  id           String @id @default(uuid())
  companyName  String
  eventPurpose String
  event        event  @relation(fields: [eventId], references: [eventId])
  eventId      String @unique
}

model birthday {
  id                 String  @id @default(uuid())
  birthdayPersonName String
  age                String
  theme              String
  specialNote        String?
  event              event   @relation(fields: [eventId], references: [eventId])
  eventId            String  @unique
}

model housewarming {
  id             String @id @default(uuid())
  hostName       String
  description    String
  specialRituals String
  event          event  @relation(fields: [eventId], references: [eventId])
  eventId        String @unique
}

model TicketsInfo {
  numberOfGeneralTicket String
  numberOfVipTickets    String
  priceVipTicket        String
  priceGeneralTicket    String
  priceEarlyBird        String
  deadline              DateTime?
  discountOnEarlyBird   String?
  deadlineEarlyBird     DateTime?
  event                 event     @relation(fields: [eventId], references: [eventId])
  eventId               String    @unique
}

model attendee {
  attendeeId     String           @id @default(uuid())
  name           String
  profile        String
  email          String
  password       String
  otp            String?
  country        String
  state          String
  city           String
  role           role             @default(attendee)
  attendeeEvents attendeeEvents[]
}

model attendeeEvents {
  id            String     @id @default(uuid())
  eventId       String
  attendeeId    String
  bookingDate   DateTime   @default(now())
  ticketType    ticketType
  paymentStatus Boolean    @default(false)
  event         event      @relation(fields: [eventId], references: [eventId])
  attendee      attendee   @relation(fields: [attendeeId], references: [attendeeId])
}

enum role {
  admin
  attendee
  organizer
}

enum eventType {
  wedding
  corporateEvent
  birthdayParties
  anniversary
  housewarmingFunction
}

enum ticketType {
  earlyBird
  vip
  general
  waitlist
}
